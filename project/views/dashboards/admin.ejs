<%- include('../layout/header') %>

<section class="dashboard">
    <div class="dashboard-header" style="background: var(--gray-900); color: white;">
        <div class="container">
            <h1 class="dashboard-title" style="color: white;">Admin Dashboard</h1>
            <p class="dashboard-subtitle" style="color: var(--gray-300);">System overview and management console for Elevate Workforce Solutions</p>
        </div>
    </div>
    
    <div class="dashboard-content">
        <div class="container">
            <!-- System Stats -->
            <div class="stats-grid">
                <div class="stat-card">
                    <div class="stat-number" style="color: var(--primary-600);"><%= stats.total_users %></div>
                    <div class="stat-label">Total Users</div>
                </div>
                <div class="stat-card">
                    <div class="stat-number" style="color: var(--secondary-600);"><%= stats.jobseekers %></div>
                    <div class="stat-label">Job Seekers</div>
                </div>
                <div class="stat-card">
                    <div class="stat-number" style="color: var(--accent-600);"><%= stats.companies %></div>
                    <div class="stat-label">Companies</div>
                </div>
                <div class="stat-card">
                    <div class="stat-number" style="color: var(--success-500);"><%= stats.total_jobs %></div>
                    <div class="stat-label">Total Jobs</div>
                </div>
                <div class="stat-card">
                    <div class="stat-number" style="color: var(--warning-500);"><%= stats.active_jobs %></div>
                    <div class="stat-label">Active Jobs</div>
                </div>
                <div class="stat-card">
                    <div class="stat-number" style="color: var(--error-500);"><%= stats.total_applications %></div>
                    <div class="stat-label">Applications</div>
                </div>
            </div>
            
            <!-- Management Tabs -->
            <div style="margin-bottom: 32px;">
                <div style="border-bottom: 2px solid var(--gray-200); margin-bottom: 24px;">
                    <div style="display: flex; gap: 32px;">
                        <button class="tab-button active" onclick="showTab('users')">Users Management</button>
                        <button class="tab-button" onclick="showTab('jobs')">Jobs Management</button>
                        <button class="tab-button" onclick="showTab('applications')">Applications</button>
                    </div>
                </div>
                
                <!-- Users Tab -->
                <div id="usersTab" class="tab-content active">
                    <div class="card">
                        <div class="card-header">
                            <h3 class="card-title">Users Management</h3>
                            <div style="display: flex; gap: 16px;">
                                <select id="userRoleFilter" onchange="filterUsers()" class="form-select" style="width: auto;">
                                    <option value="">All Roles</option>
                                    <option value="jobseeker">Job Seekers</option>
                                    <option value="company">Companies</option>
                                </select>
                                <button onclick="loadUsers()" class="btn btn-secondary">ðŸ”„ Refresh</button>
                            </div>
                        </div>
                        
                        <div id="usersTable">
                            <div style="text-align: center; padding: 40px;">
                                <div class="loading" style="margin: 0 auto 16px;"></div>
                                <p>Loading users...</p>
                            </div>
                        </div>
                    </div>
                </div>
                
                <!-- Jobs Tab -->
                <div id="jobsTab" class="tab-content">
                    <div class="card">
                        <div class="card-header">
                            <h3 class="card-title">Jobs Management</h3>
                            <div style="display: flex; gap: 16px;">
                                <select id="jobStatusFilter" onchange="filterJobs()" class="form-select" style="width: auto;">
                                    <option value="">All Status</option>
                                    <option value="active">Active</option>
                                    <option value="closed">Closed</option>
                                </select>
                                <button onclick="loadJobs()" class="btn btn-secondary">ðŸ”„ Refresh</button>
                            </div>
                        </div>
                        
                        <div id="jobsTable">
                            <div style="text-align: center; padding: 40px;">
                                <div class="loading" style="margin: 0 auto 16px;"></div>
                                <p>Loading jobs...</p>
                            </div>
                        </div>
                    </div>
                </div>
                
                <!-- Applications Tab -->
                <div id="applicationsTab" class="tab-content">
                    <div class="card">
                        <div class="card-header">
                            <h3 class="card-title">Applications Management</h3>
                            <div style="display: flex; gap: 16px;">
                                <select id="applicationStatusFilter" onchange="filterApplications()" class="form-select" style="width: auto;">
                                    <option value="">All Status</option>
                                    <option value="pending">Pending</option>
                                    <option value="reviewed">Reviewed</option>
                                    <option value="accepted">Accepted</option>
                                    <option value="rejected">Rejected</option>
                                </select>
                                <button onclick="loadApplications()" class="btn btn-secondary">ðŸ”„ Refresh</button>
                            </div>
                        </div>
                        
                        <div id="applicationsTable">
                            <div style="text-align: center; padding: 40px;">
                                <div class="loading" style="margin: 0 auto 16px;"></div>
                                <p>Loading applications...</p>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
</section>

<style>
.tab-button {
    padding: 12px 24px;
    border: none;
    background: transparent;
    color: var(--gray-600);
    font-weight: 500;
    cursor: pointer;
    border-bottom: 2px solid transparent;
    transition: all 0.2s ease;
}

.tab-button.active {
    color: var(--primary-600);
    border-bottom-color: var(--primary-600);
}

.tab-button:hover {
    color: var(--primary-600);
}

.tab-content {
    display: none;
}

.tab-content.active {
    display: block;
}
</style>

<script>
let allUsers = [];
let allJobs = [];
let allApplications = [];

// Initialize admin dashboard
document.addEventListener('DOMContentLoaded', function() {
    loadUsers();
});

function showTab(tabName) {
    // Hide all tabs
    document.querySelectorAll('.tab-content').forEach(tab => {
        tab.classList.remove('active');
    });
    
    // Remove active class from all buttons
    document.querySelectorAll('.tab-button').forEach(btn => {
        btn.classList.remove('active');
    });
    
    // Show selected tab
    document.getElementById(tabName + 'Tab').classList.add('active');
    event.target.classList.add('active');
    
    // Load data for the selected tab
    if (tabName === 'users' && allUsers.length === 0) {
        loadUsers();
    } else if (tabName === 'jobs' && allJobs.length === 0) {
        loadJobs();
    } else if (tabName === 'applications' && allApplications.length === 0) {
        loadApplications();
    }
}

async function loadUsers() {
    try {
        const response = await fetch('/api/admin/users');
        allUsers = await response.json();
        displayUsers(allUsers);
    } catch (error) {
        console.error('Error loading users:', error);
        document.getElementById('usersTable').innerHTML = '<div class="alert alert-error">Failed to load users</div>';
    }
}

function displayUsers(users) {
    const container = document.getElementById('usersTable');
    
    if (users.length === 0) {
        container.innerHTML = '<div style="text-align: center; padding: 40px;"><p>No users found</p></div>';
        return;
    }
    
    container.innerHTML = `
        <div class="table-container">
            <table class="table">
                <thead>
                    <tr>
                        <th>Name</th>
                        <th>Email</th>
                        <th>Role</th>
                        <th>Additional Info</th>
                        <th>Joined</th>
                        <th>Actions</th>
                    </tr>
                </thead>
                <tbody>
                    ${users.map(user => `
                        <tr>
                            <td>${user.name}</td>
                            <td>${user.email}</td>
                            <td><span class="status-badge status-${user.role === 'jobseeker' ? 'pending' : 'reviewed'}">${user.role}</span></td>
                            <td>${user.additional_info || 'N/A'}</td>
                            <td>${new Date(user.created_at).toLocaleDateString()}</td>
                            <td>
                                <button onclick="deleteUser(${user.id})" class="btn btn-sm btn-danger" 
                                    ${user.role === 'admin' ? 'disabled title="Cannot delete admin"' : ''}>
                                    Delete
                                </button>
                            </td>
                        </tr>
                    `).join('')}
                </tbody>
            </table>
        </div>
    `;
}

async function loadJobs() {
    try {
        const response = await fetch('/api/admin/jobs');
        allJobs = await response.json();
        displayJobs(allJobs);
    } catch (error) {
        console.error('Error loading jobs:', error);
        document.getElementById('jobsTable').innerHTML = '<div class="alert alert-error">Failed to load jobs</div>';
    }
}

function displayJobs(jobs) {
    const container = document.getElementById('jobsTable');
    
    if (jobs.length === 0) {
        container.innerHTML = '<div style="text-align: center; padding: 40px;"><p>No jobs found</p></div>';
        return;
    }
    
    container.innerHTML = `
        <div class="table-container">
            <table class="table">
                <thead>
                    <tr>
                        <th>Job Title</th>
                        <th>Company</th>
                        <th>Location</th>
                        <th>Type</th>
                        <th>Applications</th>
                        <th>Status</th>
                        <th>Posted</th>
                        <th>Actions</th>
                    </tr>
                </thead>
                <tbody>
                    ${jobs.map(job => `
                        <tr>
                            <td>${job.title}</td>
                            <td>${job.company_name}</td>
                            <td>${job.location}</td>
                            <td><span class="job-type">${job.job_type.replace('-', ' ')}</span></td>
                            <td>${job.application_count}</td>
                            <td><span class="status-badge status-${job.status}">${job.status}</span></td>
                            <td>${new Date(job.created_at).toLocaleDateString()}</td>
                            <td>
                                <button onclick="deleteJob(${job.id})" class="btn btn-sm btn-danger">Delete</button>
                            </td>
                        </tr>
                    `).join('')}
                </tbody>
            </table>
        </div>
    `;
}

async function loadApplications() {
    try {
        const response = await fetch('/api/admin/applications');
        allApplications = await response.json();
        displayApplications(allApplications);
    } catch (error) {
        console.error('Error loading applications:', error);
        document.getElementById('applicationsTable').innerHTML = '<div class="alert alert-error">Failed to load applications</div>';
    }
}

function displayApplications(applications) {
    const container = document.getElementById('applicationsTable');
    
    if (applications.length === 0) {
        container.innerHTML = '<div style="text-align: center; padding: 40px;"><p>No applications found</p></div>';
        return;
    }
    
    container.innerHTML = `
        <div class="table-container">
            <table class="table">
                <thead>
                    <tr>
                        <th>Applicant</th>
                        <th>Job</th>
                        <th>Company</th>
                        <th>Status</th>
                        <th>Applied</th>
                        <th>Resume</th>
                        <th>Actions</th>
                    </tr>
                </thead>
                <tbody>
                    ${applications.map(app => `
                        <tr>
                            <td>
                                <strong>${app.jobseeker_name}</strong><br>
                                <small style="color: var(--gray-500);">${app.jobseeker_email}</small>
                            </td>
                            <td>${app.job_title}</td>
                            <td>${app.company_name}</td>
                            <td><span class="status-badge status-${app.status}">${app.status}</span></td>
                            <td>${new Date(app.applied_at).toLocaleDateString()}</td>
                            <td>
                                ${app.resume_path ? `<a href="${app.resume_path}" target="_blank" class="btn btn-sm btn-outline">View</a>` : 'No resume'}
                            </td>
                            <td>
                                <button onclick="deleteApplication(${app.id})" class="btn btn-sm btn-danger">Delete</button>
                            </td>
                        </tr>
                    `).join('')}
                </tbody>
            </table>
        </div>
    `;
}

function filterUsers() {
    const roleFilter = document.getElementById('userRoleFilter').value;
    
    let filteredUsers = allUsers;
    if (roleFilter) {
        filteredUsers = allUsers.filter(user => user.role === roleFilter);
    }
    
    displayUsers(filteredUsers);
}

function filterJobs() {
    const statusFilter = document.getElementById('jobStatusFilter').value;
    
    let filteredJobs = allJobs;
    if (statusFilter) {
        filteredJobs = allJobs.filter(job => job.status === statusFilter);
    }
    
    displayJobs(filteredJobs);
}

function filterApplications() {
    const statusFilter = document.getElementById('applicationStatusFilter').value;
    
    let filteredApplications = allApplications;
    if (statusFilter) {
        filteredApplications = allApplications.filter(app => app.status === statusFilter);
    }
    
    displayApplications(filteredApplications);
}

async function deleteUser(userId) {
    if (confirm('Are you sure you want to delete this user? This will also delete all their data and cannot be undone.')) {
        try {
            const response = await fetch(`/api/admin/users/${userId}`, {
                method: 'DELETE'
            });
            
            if (response.ok) {
                loadUsers();
                // Update stats
                window.location.reload();
            } else {
                alert('Failed to delete user');
            }
        } catch (error) {
            console.error('Error deleting user:', error);
            alert('Failed to delete user');
        }
    }
}

async function deleteJob(jobId) {
    if (confirm('Are you sure you want to delete this job? This will also delete all applications for this job.')) {
        try {
            const response = await fetch(`/api/admin/jobs/${jobId}`, {
                method: 'DELETE'
            });
            
            if (response.ok) {
                loadJobs();
                // Update stats
                window.location.reload();
            } else {
                alert('Failed to delete job');
            }
        } catch (error) {
            console.error('Error deleting job:', error);
            alert('Failed to delete job');
        }
    }
}

async function deleteApplication(applicationId) {
    if (confirm('Are you sure you want to delete this application?')) {
        try {
            const response = await fetch(`/api/admin/applications/${applicationId}`, {
                method: 'DELETE'
            });
            
            if (response.ok) {
                loadApplications();
                // Update stats
                window.location.reload();
            } else {
                alert('Failed to delete application');
            }
        } catch (error) {
            console.error('Error deleting application:', error);
            alert('Failed to delete application');
        }
    }
}
</script>

<%- include('../layout/footer') %>